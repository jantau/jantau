html_table()
View(sp500)
paste0("https://www.finanzen.net/index/s&p_500/fundamental?p=", "1")
datalist = list()
for (i in 1:11) {
sp500_fundamental_page <- paste0("https://www.finanzen.net/index/s&p_500/fundamental?p=", i)
datalist = list()
sp500 <- sp500_fundamental_page %>%
read_html() %>%
html_element(css = "#IndexShareListValues > div > table") %>%
html_table()
datalist[[i]] <- sp500
}
View(datalist)
datalist = list()
for (i in 1:11) {
sp500_fundamental_page <- paste0("https://www.finanzen.net/index/s&p_500/fundamental?p=", i)
sp500 <- sp500_fundamental_page %>%
read_html() %>%
html_element(css = "#IndexShareListValues > div > table") %>%
html_table()
datalist[[i]] <- sp500
}
View(datalist)
sp500_complete <- bind_rows(datalist)
View(sp500_complete)
datalist = list()
for (i in 1:20) {
sp500_fundamental_page <- paste0("https://www.finanzen.net/index/s&p_500/fundamental?p=", i)
sp500 <- sp500_fundamental_page %>%
read_html() %>%
html_element(css = "#IndexShareListValues > div > table") %>%
html_table()
datalist[[i]] <- sp500
}
for (i in 1:11) {
sp500_fundamental_page <- paste0("https://www.finanzen.net/index/s&p_500/fundamental?p=", i)
sp500 <- sp500_fundamental_page %>%
read_html() %>%
html_element(css = "#IndexShareListValues > div > table") %>%
html_table()
datalist[[i]] <- sp500
}
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_remove(KGV, " (2020)"))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_remove(KGV, " (2020)"))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " (2020)", ""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, "(2020)", ""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", ""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(KGV, ""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", ""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", ""))
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", ""))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(KGV, ""))
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(KGV, ""))
mean(sp500_complete$KGV)
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(KGV, "")) %>%
mutate(KGV = as.numeric(KGV))
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(KGV, "")) %>%
mutate(KGV = is.numeric(KGV))
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = na_if(KGV, "")) %>%
mutate(KGV = is.numeric(KGV))
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = na_if(KGV, ""))
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = na_if(KGV, "")) %>%
mutate(KGV = as.numeric(KGV))
mean(sp500_complete$KGV)
mean(sp500_complete$KGV, na_rm = TRUE)
mean(sp500_complete$KGV, na_rm = F)
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = na_if(KGV, "")) %>%
mutate(KGV = as.numeric(KGV))
mean(sp500_complete$KGV, na_rm = TRUE)
median(sp500_complete$KGV, na_rm = TRUE)
sum(sp500_complete$KGV, na_rm = TRUE)
sum(sp500_complete$KGV)
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = na_if(KGV, "")) %>%
mutate(KGV = as.numeric(KGV))
sum(sp500_complete$KGV)
sp500_complete$KGV[1]
sp500_complete$KGV[1] + sp500_complete$KGV[1]
sp500_complete$KGV[1] + sp500_complete$KGV[15]
sp500_complete$KGV[1] + sp500_complete$KGV[19]
sum(sp500_complete$KGV, na_rm = TRUE)
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = as.numeric(KGV)) %>%
mutate(KGV = na_if(KGV, ""))
sum(sp500_complete$KGV, na_rm = TRUE)
sum(sp500_complete$KGV, na_rm = TRUE)
sp500_complete$KGV[1] + sp500_complete$KGV[19]
sum(sp500_complete$KGV, na.rm = TRUE)
mean(sp500_complete$KGV, na.rm = TRUE)
mean(sp500_complete$KGV, na.rm = TRUE)
sp500_complete <- bind_rows(datalist)
sp500_complete <- sp500_complete %>%
select(-6, -7) %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = as.numeric(KGV)) %>%
mutate(KGV = na_if(KGV, ""))
sp500_complete <- bind_rows(datalist)
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate_at(vars(-("Name")), list(str_replace(., " .*", "")))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate_at(vars(-("Name")), str_replace(., " .*", ""))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate_at(vars(-(Name)), str_replace(., " .*", ""))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, str_replace(" .*", "")))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, str_replace(., " .*", "")))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, list(str_replace(., " .*", ""))))
mutate(across(list(str_replace(., " .*", "")))
sp500_complete2 <- sp500_complete %>%
mutate(across(str_replace(., " .*", ""))
sp500_complete2 <- sp500_complete %>%
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(str_replace(., " .*", "")))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, (str_replace(., " .*", ""))))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, ~ str_replace(., " .*", "")))
View(sp500_complete2)
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, ~ str_replace(., " .*", ""))) %>%
mutate(across(!Name, ~ str_replace(., ",", "."))) %>%
mutate(across(!Name, ~ as.numeric(.)))
sp500_complete <- bind_rows(datalist)
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, ~ str_replace(., " .*", ""))) %>%
mutate(across(!Name, ~ str_replace(., ",", "."))) %>%
mutate(across(!Name, ~ as.numeric(.)))
sp500_complete2 <- sp500_complete %>%
select(-6, -7) %>%
mutate(across(!Name, ~ str_replace(., " .*", ""))) %>%
mutate(across(!Name, ~ str_replace(., ",", "."))) %>%
mutate(across(!Name, ~ as.numeric(.))) %>%
mutate(across(c(3, 5), ~ replace_na(., 0)))
mean(sp500_complete2$KGV, na.rm = TRUE)
sp500_complete <- sp500_complete %>%
select(-6, -7) %>%
mutate(KGV = str_replace(KGV, " .*", "")) %>%
mutate(KGV = str_replace(KGV, ",", ".")) %>%
mutate(KGV = as.numeric(KGV)) %>%
mutate(KGV = na_if(KGV, ""))
mean(sp500_complete$KGV, na.rm = TRUE)
install.packages("blogdown")
install.packages("blogdown")
blogdown:::preview_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::check_content()
blogdown::check_gitignore()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
fig
fig <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
cat("\014") # Clear your console
rm(list = ls()) # Clear your environment
# Load in header file
setwd("/Users/jan/blog/jantau/content/post/2021-12-22-recap-nasdaq-100")
library(plotly)
library(tidyquant)
library(tidyverse)
ndx <- tq_get(c("^NDX"),
get  = "stock.prices",
from = "2021-01-01",
to = Sys.Date()) %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "weekly")
ndx_perf <- tq_get(c("^NDX"),
get  = "stock.prices",
from = "2021-01-01",
to = Sys.Date()) %>%
select(symbol, date, adjusted) %>%
mutate(adj_perc = adjusted/first(adjusted)-1)
ndx_perf_acc <- ndx_perf %>%
split(.$date) %>%
accumulate( ~ bind_rows(.x, .y)) %>%
# set_names(1960:2018) %>%
bind_rows(.id = "frame")
fig <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
fig
fig <- plotly_json(fig, FALSE)
write(fig,'test.json')
fig2 <- ndx_perf %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines()
fig2
fig2 <- plotly_json(fig2, FALSE)
write(fig,'test2.json')
write(fig2,'test2.json')
fig <- plotly_json(fig, TRUE)
fig <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
fig <- plotly_json(fig, TRUE)
fig <- plotly_json(fig)
fig <- plotly_json(fig, FALSE)
fig1 <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
fig <- plotly_json(fig1, TRUE)
install.packages("listviewer")
library(listviewer)
fig <- plotly_json(fig1, TRUE)
write(fig,'test.json')
fig <- plotly_json(fig1, FALSE)
write(fig,'test.json')
fig <- plotly_json(fig1, jsonedit = interactive(), FALSE)
write(fig,'test.json')
jsonData < toJSON(fig)
jsonData <- toJSON(fig)
library(httr)
jsonData <- toJSON(fig)
install.packages("rjson")
library(rjson)
jsonData <- toJSON(fig)
write(jsonData,'test.json')
fig1
fig <- plotly_json(fig1, jsonedit = interactive(), TRUE)
jsonData <- toJSON(fig)
write(jsonData,'test.json')
fig1 <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
fig <- plotly_json(fig1, jsonedit = interactive(), TRUE)
jsonData <- toJSON(fig)
write(jsonData,'test.json')
fig <- plotly_json(fig1, TRUE)
jsonData <- toJSON(fig)
write(jsonData,'test.json')
fig <- plotly_json(fig1, FALSE)
jsonData <- toJSON(fig)
write(jsonData,'test.json')
fig <- plotly_json(fig1, FALSE)
write(fig,'test.json')
ndx_acc <- ndx %>%
split(.$date) %>%
accumulate( ~ bind_rows(.x, .y)) %>%
# set_names(1960:2018) %>%
bind_rows(.id = "frame") %>%
mutate(date = as.character(date))
ndx_acc %>%
plot_ly(x = ~date, y = ~weekly.returns) %>%
add_bars(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"))
fig3 <- ndx_acc %>%
plot_ly(x = ~date, y = ~weekly.returns) %>%
add_bars(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"))
jsonData <- toJSON(fig3)
fig_out <- plotly_json(fig3, FALSE)
write(fig_out,'test.json')
jsonData <- toJSON(fig_out)
write(jsonData,'test.json')
fig_out <- plotly_json(fig3, TRUE)
write(fig_out,'test.json')
fig_out <- plotly_json(fig3, jsonedit = interactive(), FALSE)
write(fig_out,'test.json')
fig_out <- plotly_json(fig3, jsonedit = interactive, FALSE)
fig_out <- plotly_json(fig3, FALSE)
write(fig_out,'test.json')
library(htmlwidgets)
partial_bundle(fig3) %>% saveWidget( "test.html", selfcontained = FALSE, libdir = "lib")
fig1 <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
fig <- plotly_json(fig1, FALSE)
partial_bundle(fig) %>% saveWidget( "test.html", selfcontained = FALSE, libdir = "lib")
fig1 <- ndx_perf_acc %>%
plot_ly(x = ~date, y = ~adj_perc) %>%
add_lines(frame = ~frame, showlegend = FALSE) %>%
layout(xaxis = list(
title = list(visible = FALSE),
range =
c(as.numeric(as.POSIXct("2021-01-01", format="%Y-%m-%d"))*1000,
as.numeric(as.POSIXct("2021-12-31", format="%Y-%m-%d"))*1000),
type = "date"),
yaxis = list(title = "Performance",
tickformat = ",.0%")
) %>%
animation_opts(
frame = 100,
transition = 50,
easing = "elastic"
) %>%
animation_slider(
tickcolor = "white",
font = list(color = "white"),
currentvalue = list(
prefix = NULL,
font = list(color = "gray")
)
)
partial_bundle(fig1) %>% saveWidget( "test.html", selfcontained = FALSE, libdir = "lib")
saveWidget(fig, "output-charts/p1.html", selfcontained = FALSE, libdir = "lib")
partial_bundle(fig1) %>% saveWidget( "test.html", selfcontained = FALSE, libdir = "lib")
