size = 3.5
) +
annotate(
geom = "curve",
x = as.Date("2018-12-01"),
y = 90,
xend = as.Date("2020-12-01"),
yend = 98,
curvature = -.1,
arrow = arrow(length = unit(2, "mm")),
col = "white"
) +
annotate(
geom = "label",
x = as.Date("2018-10-01"),
y = 80,
label = "6 % der Anteile\nwurden in der letzten\nAnsparphase zwischen\n2016 und 2020 gekauft.",
hjust = "right",
col = "white",
fill = pal[3],
alpha = 0.8,
size = 3.5
)
dax_period_percentage %>%
mutate(percentage = percentage * 100) %>%
ggplot(aes(x = date, y = percentage, fill = period)) +
geom_area(size = .5,
colour = "white") +
scale_fill_got_d(option = "Daenerys", direction = -1) +
theme_jantau +
labs(
title = "Zeit im Markt",
subtitle = "Zinseszins- und Durchschnittskosteneffekt beim Investieren in den Dax 30",
caption = "Datenanalyse u. Visualisierung: jantau.com | Daten: finance.yahoo.com",
fill = "Wann Gekauft?"
) +
theme(
legend.position = c(0.2, 0.4),
legend.background = element_rect(fill = pal[1]),
legend.title = element_text(color = "white", size = 10),
legend.text = element_text(color = "white"),
axis.title.y = element_blank(),
axis.title.x = element_blank()
) +
scale_y_continuous(
sec.axis = sec_axis( ~ ., labels = dollar_format(suffix = " %",
prefix = "")),
labels = dollar_format(suffix = " %",
prefix = "")
) +
scale_x_date(breaks = as.Date(
c(
"1991-01-01",
"1995-12-31",
"2000-12-31",
"2005-12-31",
"2010-12-31",
"2015-12-31",
"2020-12-31"
)
),
labels = date_format("%Y"))
dax_period_percentage %>%
mutate(percentage = percentage * 100) %>%
ggplot(aes(x = date, y = percentage, fill = period)) +
geom_area(size = .5,
colour = "white") +
scale_fill_got_d(option = "Daenerys", direction = -1) +
theme_jantau +
labs(
title = "Zeit im Markt",
subtitle = "Zinseszins- und Durchschnittskosteneffekt beim Investieren in den Dax 30",
caption = "Datenanalyse u. Visualisierung: jantau.com | Daten: finance.yahoo.com",
fill = "Wann Gekauft?"
) +
theme(
legend.position = c(0.2, 0.4),
legend.position = "none",
# legend.background = element_rect(fill = pal[1]),
#  legend.title = element_text(color = "white", size = 10),
# legend.text = element_text(color = "white"),
axis.title.y = element_blank(),
axis.title.x = element_blank()
) +
scale_y_continuous(
sec.axis = sec_axis( ~ ., labels = dollar_format(suffix = " %",
prefix = "")),
labels = dollar_format(suffix = " %",
prefix = "")
) +
scale_x_date(breaks = as.Date(
c(
"1991-01-01",
"1995-12-31",
"2000-12-31",
"2005-12-31",
"2010-12-31",
"2015-12-31",
"2020-12-31"
)
),
labels = date_format("%Y"))
dax_period_percentage %>%
mutate(percentage = percentage * 100) %>%
ggplot(aes(x = date, y = percentage, fill = period)) +
geom_area(size = .5,
colour = "white") +
scale_fill_got_d(option = "Daenerys", direction = -1) +
theme_jantau +
labs(
title = "Zeit im Markt",
subtitle = "Zinseszins- und Durchschnittskosteneffekt beim Investieren in den Dax 30",
caption = "Datenanalyse u. Visualisierung: jantau.com | Daten: finance.yahoo.com",
fill = "Wann Gekauft?"
) +
theme(
#legend.position = c(0.2, 0.4),
legend.position = "none",
# legend.background = element_rect(fill = pal[1]),
#  legend.title = element_text(color = "white", size = 10),
# legend.text = element_text(color = "white"),
axis.title.y = element_blank(),
axis.title.x = element_blank()
) +
scale_y_continuous(
sec.axis = sec_axis( ~ ., labels = dollar_format(suffix = " %",
prefix = "")),
labels = dollar_format(suffix = " %",
prefix = "")
) +
scale_x_date(breaks = as.Date(
c(
"1991-01-01",
"1995-12-31",
"2000-12-31",
"2005-12-31",
"2010-12-31",
"2015-12-31",
"2020-12-31"
)
),
labels = date_format("%Y"))
dax_period_percentage %>%
mutate(percentage = percentage * 100) %>%
ggplot(aes(x = date, y = percentage, fill = period)) +
geom_area(size = .5,
colour = "white") +
scale_fill_got_d(option = "Daenerys", direction = -1) +
theme_jantau +
labs(
title = "Zeit im Markt",
subtitle = "Zinseszins- und Durchschnittskosteneffekt beim Investieren in den Dax 30",
caption = "Datenanalyse u. Visualisierung: jantau.com | Daten: finance.yahoo.com",
fill = "Wann Gekauft?"
) +
theme(
legend.position = c(0.2, 0.4),
legend.background = element_rect(fill = pal[1]),
legend.title = element_text(color = "white", size = 10),
legend.text = element_text(color = "white"),
axis.title.y = element_blank(),
axis.title.x = element_blank()
) +
scale_y_continuous(
sec.axis = sec_axis( ~ ., labels = dollar_format(suffix = " %",
prefix = "")),
labels = dollar_format(suffix = " %",
prefix = "")
) +
scale_x_date(breaks = as.Date(
c(
"1991-01-01",
"1995-12-31",
"2000-12-31",
"2005-12-31",
"2010-12-31",
"2015-12-31",
"2020-12-31"
)
),
labels = date_format("%Y")) +
annotate(
geom = "curve",
x = as.Date("2018-12-01"),
y = 25,
xend = as.Date("2020-12-01"),
yend = 25,
curvature = .1,
arrow = arrow(length = unit(2, "mm")),
col = "white"
) +
annotate(
geom = "label",
x = as.Date("2018-10-01"),
y = 25,
label = "40 % der Anteile\nwurden in der ersten\nAnsparphase zwischen\n1991 und 1995 gekauft.",
hjust = "right",
col = "white",
fill = pal[1],
alpha = 0.8,
size = 3.5
) +
annotate(
geom = "curve",
x = as.Date("2018-12-01"),
y = 90,
xend = as.Date("2020-12-01"),
yend = 98,
curvature = -.1,
arrow = arrow(length = unit(2, "mm")),
col = "white"
) +
annotate(
geom = "label",
x = as.Date("2018-10-01"),
y = 80,
label = "6 % der Anteile\nwurden in der letzten\nAnsparphase zwischen\n2016 und 2020 gekauft.",
hjust = "right",
col = "white",
fill = pal[3],
alpha = 0.8,
size = 3.5
)
blogdown:::preview_site()
blogdown::new_post("investieren-und-lebenszeit", ext = ".md")
blogdown::new_post("investieren-und-lebenszeit", ext = ".md")
blogdown:::preview_site()
# Load in header file
source("./content/post/header.R")
setwd("./content/post/2022-09-14-investieren-und-lebenszeit")
annuity_years <- function(contrib = 100, rate = 0.05, end_amount = 500000) {
years <- log(end_amount / contrib * rate / 12 + 1) / log(1 + rate / 12)
savings <- contrib * years
result <- c(Jahre = years/12, Ansparen = savings, Ansparrate = contrib)
return(result)
}
annuity_years(contrib = 150, rate = 0.07, end_amount = 500000)
annuity_years(contrib = 10, rate = 0.07, end_amount = 500000)
annuity_years(contrib = 25, rate = 0.07, end_amount = 500000)
annuity_years(contrib = 10, rate = 0.07, end_amount = 500000)
annuity_years(contrib = 10, rate = 0.07, end_amount = 500000)
annuity_years(contrib = -10, rate = 0.07, end_amount = 500000)
annuity_years(contrib = 10, rate = 0.07, end_amount = 500000)
blogdown:::preview_site()
3.5/5
3/4
3/5
2.5/4
blogdown:::preview_site()
blogdown:::preview_site()
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Load R libraries and themes ----
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
cat("\014") # Clear your console
rm(list = ls()) # Clear your environment
# Load in header file
source("./content/post/header.R")
setwd("./content/post/2022-07-31-sparplantag-2")
# Load in header file
source("./content/post/header.R")
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Load R libraries and themes ----
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
cat("\014") # Clear your console
rm(list = ls()) # Clear your environment
# Load in header file
source("./content/post/header.R")
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Load R libraries and themes ----
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
cat("\014") # Clear your console
rm(list = ls()) # Clear your environment
setwd(".")
getwd()
setwd("")
setwd("/Users/jan/Documents/jantau/")
# Load in header file
source("./content/post/header.R")
install.packages("ggtext")
# Load in header file
source("./content/post/header.R")
install.packages("ggrepel")
# Load in header file
source("./content/post/header.R")
install.packages("kableExtra")
# Load in header file
source("./content/post/header.R")
setwd("./content/post/2022-07-31-sparplantag-2")
# Define variable savings rate
savings_rate = 1000
load("xetra_df.Rdata")
View(xetra_df)
xetra_aum <- xetra_df %>%
filter(income_treatment == "Accumulating") %>%
filter(month == "2022-07-31") %>%
arrange(-aum) %>%
head(n = 100) %>%
mutate(xetra_ticker = paste0(xetra_ticker, ".DE"))
View(xetra_aum)
# Find oldest ETFs
etf_data <- tq_get(xetra_aum$xetra_ticker,
get  = "stock.prices",
from = "2012-07-01",
to = "2012-07-30") %>%
select(symbol, date, adjusted)
etf_oldest <- etf_data %>% distinct(symbol, .keep_all = TRUE) %>% head(15)
etf_old <- etf_oldest %>% select(symbol) %>%
left_join(xetra_aum, by = c("symbol" = "xetra_ticker"))
View(etf_old)
# Vector with ten biggest, accumulating XETRA ETFs with fund age > 10
etfs <- etf_old %>% head(10) %>% pull(symbol)
# Create lists for results
datalist <- list()
datalist_final <- list()
# 1. loop to query vector of ETF ticker symbols
for(x in etfs) {
etf_data <- tq_get(x,
get  = "stock.prices",
from = "2012-09-01",
to = "2022-09-01") %>%
select(symbol, date, adjusted)
# 2. loop to prepare data
for (y in seq(31)) {
data <- etf_data %>%
mutate(yearmon = floor_date(date, unit = "month"),
.after = date) %>%
mutate(day = substr(date, start = 9, stop = 10)) %>%
mutate(day = as.numeric(day)) %>%
complete(symbol, yearmon, day, fill = list(NA)) %>%
fill(adjusted, .direction = "updown") %>%
filter(day == y) %>% # | row_number() == n()
mutate(savings = row_number() * savings_rate) %>%
mutate(
shares = ifelse(row_number() == 1, savings_rate / adjusted, NA)
)
# 3. loop to simulate saving plans
for (z in 2:nrow(data)) {
data[z, "shares"] <-
data[z - 1, "shares"] + (savings_rate / data[z, "adjusted"])
}
etf_data_last <- etf_data %>%
filter(row_number() == n())
data <- bind_rows(data, etf_data_last) %>%
fill(savings, shares, .direction = "down") %>%
mutate(portfolio = adjusted * shares,
day = y) %>%
tail(1)
datalist[[y]] <- data
}
data <- bind_rows(datalist)
datalist_final[[x]] <- data
}
View(datalist)
data <- bind_rows(datalist_final)
View(data)
data_result <- data %>%
select(-yearmon) %>%
group_by(symbol) %>%
mutate(day_type = case_when(portfolio == max(portfolio) ~ "best_day",
portfolio == min(portfolio) ~ "worst_day")) %>%
ungroup()
View(data_result)
data_result <- data_result %>%
group_by(symbol) %>%
mutate(abs_perf = portfolio - savings) %>%
mutate(perc_perf = max(abs_perf)/min(abs_perf)-1) %>%
mutate(perc_perf_total = (portfolio / savings - 1) * 100) %>%
ungroup()
View(data_result)
data_result <- data_result %>%
group_by(symbol) %>%
mutate(rank = dense_rank(-portfolio)) %>%
ungroup() %>%
arrange(symbol, rank, decreasing = TRUE) %>%
mutate(symbol = fct_reorder(symbol, -perc_perf_total))
View(data_result)
data_ranked <- data_result %>%
group_by(day) %>%
summarise(mean_rank = mean(rank)) %>%
ungroup() %>%
mutate(rank = dense_rank(mean_rank)) %>%
mutate(color = case_when(rank <= 5 ~ "A",
rank >= 27 ~ "C",
TRUE ~ "B"))
View(data_ranked)
data_ranked_symbol <- data_result %>%
group_by(symbol, day, perc_perf_total) %>%
summarise(mean_rank = mean(rank)) %>%
ungroup() %>%
mutate(rank = dense_rank(mean_rank)) %>%
mutate(color = case_when(rank <= 5 ~ "A",
rank >= 27 ~ "C",
TRUE ~ "B"))
View(data_ranked_symbol)
label_1 <- c("Die besten 5 Tage\nfür die langfristige Investition\nin einen monatlichen ETF-Sparplan")
label_2 <- c("Die schlechtesten 5 Tage\nfür die langfristige Investition\nin einen monatlichen ETF-Sparplan")
pal <- got(3, option = "Daenerys", direction = 1)
data_ranked %>%
ggplot(aes(x = day, y = rank, label = rank, fill = color)) +
geom_col() +
geom_text(size = 2.5, vjust = 1.2, colour = "white") +
annotate("label", fill = "white", label.size = NA, x = 10, y = 20, label = label_1, size = 3, color = pal[2]) +
geom_curve(x = 5,
y = 20,
xend = 3,
yend = 4,
curvature = 0.6,
angle = 60,
ncp = 20,
arrow = arrow(length = unit(0.2,"cm"), type = "closed"),
color = pal[2],
size = 0.5,
linetype = 1) +
annotate("label", fill = "white", label.size = NA, x = 15, y = 28, label = label_2, size = 3, color = pal[1]) +
geom_curve(x = 20,
y = 28,
xend = 29,
yend = 29.6,
curvature = -0.6,
angle = 50,
ncp = 40,
arrow = arrow(length = unit(0.2,"cm"), type = "closed"),
color = pal[1],
size = 0.5,
linetype = 1) +
scale_x_continuous(
breaks= c(1:31),
labels = c("1\nTag im Monat", as.character(2:31))) +
scale_y_continuous(
breaks= c(1:31),
labels = c("Rang 1", as.character(2:31))) +
scale_fill_manual(values = pal[c(2,3,1)]) +
theme_jantau +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.y = element_line(color = "grey",
size = 0.2,
linetype = 3),
legend.position = "none",
plot.title = element_markdown(size = 13,
face = "plain",
hjust = 0,
margin = ggplot2::margin(0, 0, 10, 0)),
plot.subtitle = element_markdown(size = 8,
face = "plain",
hjust = 0,
margin = ggplot2::margin(0, 0, 10, 0)),
plot.caption = element_markdown(size = 6,
face = "plain",
hjust = 0)) +
labs(title = "Die <span style='color:#2B818E;'>besten</span> und die <span style='color:#792427;'>schlechtesten</span> Tage<br>für die langfristige Investition in einen monatlichen ETF-Sparplan",
subtitle = "Durchschnittswert der 10 größten, thesaurierenden, XETRA-gehandelten ETFs mit einem Fondsalter > 10 Jahre<br>
Sparplansimulation von 09/2012 bis 08/2022 mit monatlich konstanter Einlage",
caption = "Datenanalyse u. Visualisierung: jantau.com | Daten: finance.yahoo.com")
pal <- c("#2B818E", "#792427", "#D9D9D9")
data_ranked %>%
ggplot(aes(x = day, y = rank, label = rank, fill = color)) +
geom_col() +
geom_text(size = 2.5, vjust = 1.2, colour = "white") +
annotate("label", fill = "white", label.size = NA, x = 10, y = 20, label = label_1, size = 3, color = pal[2]) +
geom_curve(x = 5,
y = 20,
xend = 3,
yend = 4,
curvature = 0.6,
angle = 60,
ncp = 20,
arrow = arrow(length = unit(0.2,"cm"), type = "closed"),
color = pal[2],
size = 0.5,
linetype = 1) +
annotate("label", fill = "white", label.size = NA, x = 15, y = 28, label = label_2, size = 3, color = pal[1]) +
geom_curve(x = 20,
y = 28,
xend = 29,
yend = 29.6,
curvature = -0.6,
angle = 50,
ncp = 40,
arrow = arrow(length = unit(0.2,"cm"), type = "closed"),
color = pal[1],
size = 0.5,
linetype = 1) +
scale_x_continuous(
breaks= c(1:31),
labels = c("1\nTag im Monat", as.character(2:31))) +
scale_y_continuous(
breaks= c(1:31),
labels = c("Rang 1", as.character(2:31))) +
scale_fill_manual(values = pal[c(2,3,1)]) +
theme_jantau +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.y = element_line(color = "grey",
size = 0.2,
linetype = 3),
legend.position = "none",
plot.title = element_markdown(size = 13,
face = "plain",
hjust = 0,
margin = ggplot2::margin(0, 0, 10, 0)),
plot.subtitle = element_markdown(size = 8,
face = "plain",
hjust = 0,
margin = ggplot2::margin(0, 0, 10, 0)),
plot.caption = element_markdown(size = 6,
face = "plain",
hjust = 0)) +
labs(title = "Die <span style='color:#2B818E;'>besten</span> und die <span style='color:#792427;'>schlechtesten</span> Tage<br>für die langfristige Investition in einen monatlichen ETF-Sparplan",
subtitle = "Durchschnittswert der 10 größten, thesaurierenden, XETRA-gehandelten ETFs mit einem Fondsalter > 10 Jahre<br>
Sparplansimulation von 09/2012 bis 08/2022 mit monatlich konstanter Einlage",
caption = "Datenanalyse u. Visualisierung: jantau.com | Daten: finance.yahoo.com")
